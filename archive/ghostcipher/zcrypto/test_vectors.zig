//! Official test vectors for GhostCipher/ZCrypto
//! Ensures compatibility with standard implementations

const std = @import("std");
const zcrypto = @import("root.zig");

/// NIST test vectors for AES-256-GCM
pub const aes_256_gcm_vectors = struct {
    pub const vector_1 = struct {
        pub const key = [_]u8{ 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f };
        pub const nonce = [_]u8{ 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b };
        pub const plaintext = "Hello, AES-GCM test vector!";
        pub const aad = "additional data";
        // Expected ciphertext and tag would be computed by reference implementation
    };
};

/// RFC 8439 test vectors for ChaCha20-Poly1305
pub const chacha20_poly1305_vectors = struct {
    pub const rfc8439_vector = struct {
        pub const key = [_]u8{ 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f };
        pub const nonce = [_]u8{ 0x07, 0x00, 0x00, 0x00, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47 };
        pub const plaintext = "Ladies and Gentlemen of the class of '99: If I could offer you only one tip for the future, sunscreen would be it.";
        pub const aad = [_]u8{ 0x50, 0x51, 0x52, 0x53, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7 };
    };
};

/// RFC 8032 test vectors for Ed25519
pub const ed25519_vectors = struct {
    pub const test_vector_1 = struct {
        pub const private_key = [_]u8{ 0x9d, 0x61, 0xb1, 0x9d, 0xef, 0xfd, 0x5a, 0x60, 0xba, 0x84, 0x4a, 0xf4, 0x92, 0xec, 0x2c, 0xc4, 0x44, 0x49, 0xc5, 0x69, 0x7b, 0x32, 0x69, 0x19, 0x70, 0x3b, 0xac, 0x03, 0x1c, 0xae, 0x7f, 0x60 };
        pub const public_key = [_]u8{ 0xd7, 0x5a, 0x98, 0x01, 0x82, 0xb1, 0x0a, 0xb7, 0xd5, 0x4b, 0xfe, 0xd3, 0xc9, 0x64, 0x07, 0x3a, 0x0e, 0xe1, 0x72, 0xf3, 0xda, 0xa6, 0x23, 0x25, 0xaf, 0x02, 0x1a, 0x68, 0xf7, 0x07, 0x51, 0x1a };
        pub const message = "";
        pub const signature = [_]u8{ 0xe5, 0x56, 0x43, 0x00, 0xc3, 0x60, 0xac, 0x72, 0x90, 0x86, 0xe2, 0xcc, 0x80, 0x6e, 0x82, 0x8a, 0x84, 0x87, 0x7f, 0x1e, 0xb8, 0xe5, 0xd9, 0x74, 0xd8, 0x73, 0xe0, 0x65, 0x22, 0x49, 0x01, 0x55, 0x5f, 0xb8, 0x82, 0x15, 0x90, 0xa3, 0x3b, 0xac, 0xc6, 0x1e, 0x39, 0x70, 0x1c, 0xf9, 0xb4, 0x6b, 0xd2, 0x5b, 0xf5, 0xf0, 0x59, 0x5b, 0xbe, 0x24, 0x65, 0x51, 0x41, 0x43, 0x8e, 0x7a, 0x10, 0x0b };
    };

    pub const test_vector_2 = struct {
        pub const private_key = [_]u8{ 0x4c, 0xcd, 0x08, 0x9b, 0x28, 0xff, 0x96, 0xda, 0x9d, 0xb6, 0xc3, 0x46, 0xec, 0x11, 0x4e, 0x0f, 0x5b, 0x8a, 0x31, 0x9f, 0x35, 0xab, 0xa6, 0x24, 0xda, 0x8c, 0xf6, 0xed, 0x4f, 0xb8, 0xa6, 0xfb };
        pub const public_key = [_]u8{ 0x3d, 0x40, 0x17, 0xc3, 0xe8, 0x43, 0x89, 0x5a, 0x92, 0xb7, 0x0a, 0xa7, 0x4d, 0x1b, 0x7e, 0xbc, 0x9c, 0x98, 0x2c, 0xcf, 0x2e, 0xc4, 0x96, 0x8c, 0xc0, 0xcd, 0x55, 0xf1, 0x2a, 0xf4, 0x66, 0x0c };
        pub const message = [_]u8{0x72};
        pub const signature = [_]u8{ 0x92, 0xa0, 0x09, 0xa9, 0xf0, 0xd4, 0xca, 0xb8, 0x72, 0x0e, 0x82, 0x0b, 0x5f, 0x64, 0x25, 0x40, 0xa2, 0xb2, 0x7b, 0x54, 0x16, 0x50, 0x3f, 0x8f, 0xb3, 0x76, 0x22, 0x23, 0xeb, 0xdb, 0x69, 0xda, 0x08, 0x5a, 0xc1, 0xe4, 0x3e, 0x15, 0x99, 0x6e, 0x45, 0x8f, 0x36, 0x13, 0xd0, 0xf1, 0x1d, 0x8c, 0x38, 0x7b, 0x2e, 0xae, 0xb4, 0x30, 0x2a, 0xee, 0xb0, 0x0d, 0x29, 0x16, 0x12, 0xbb, 0x0c, 0x00 };
    };
};

/// NIST test vectors for SHA-256
pub const sha256_vectors = struct {
    pub const abc = struct {
        pub const input = "abc";
        pub const expected = [_]u8{ 0xba, 0x78, 0x16, 0xbf, 0x8f, 0x01, 0xcf, 0xea, 0x41, 0x41, 0x40, 0xde, 0x5d, 0xae, 0x22, 0x23, 0xb0, 0x03, 0x61, 0xa3, 0x96, 0x17, 0x7a, 0x9c, 0xb4, 0x10, 0xff, 0x61, 0xf2, 0x00, 0x15, 0xad };
    };

    pub const empty = struct {
        pub const input = "";
        pub const expected = [_]u8{ 0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55 };
    };

    pub const long_message = struct {
        pub const input = "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq";
        pub const expected = [_]u8{ 0x24, 0x8d, 0x6a, 0x61, 0xd2, 0x06, 0x38, 0xb8, 0xe5, 0xc0, 0x26, 0x93, 0x0c, 0x3e, 0x60, 0x39, 0xa3, 0x3c, 0xe4, 0x59, 0x64, 0xff, 0x21, 0x67, 0xf6, 0xec, 0xed, 0xd4, 0x19, 0xdb, 0x06, 0xc1 };
    };
};

/// BLAKE3 test vectors
pub const blake3_vectors = struct {
    pub const empty = struct {
        pub const input = "";
        pub const expected = [_]u8{ 0xaf, 0x13, 0x49, 0xb9, 0xf5, 0xf9, 0xa1, 0xa6, 0xa0, 0x40, 0x4d, 0xea, 0x36, 0xdc, 0xc9, 0x49, 0x9b, 0xcb, 0x25, 0xc9, 0xad, 0xc1, 0x12, 0xb7, 0xcc, 0x9a, 0x93, 0xca, 0xe4, 0x1f, 0x32, 0x62 };
    };

    pub const hello = struct {
        pub const input = "hello world";
        pub const expected = [_]u8{ 0xd7, 0x4c, 0x81, 0xec, 0xf4, 0x74, 0x87, 0xce, 0xd6, 0xdb, 0x15, 0x51, 0xab, 0x0c, 0x73, 0xee, 0x61, 0x14, 0x40, 0x5f, 0x8b, 0xb9, 0x52, 0x95, 0xeb, 0xf6, 0x66, 0x22, 0x0d, 0x49, 0x4e, 0x0b };
    };
};

test "AES-256-GCM test vectors" {
    const allocator = std.testing.allocator;
    const vector = aes_256_gcm_vectors.vector_1;

    // Test encryption
    const result = try zcrypto.sym.encryptAes256Gcm(
        allocator,
        vector.key,
        vector.nonce,
        vector.plaintext,
        vector.aad,
    );
    defer result.deinit();

    // Test decryption
    const decrypted = try zcrypto.sym.decryptAes256Gcm(
        allocator,
        vector.key,
        vector.nonce,
        result.data,
        result.tag,
        vector.aad,
    );
    defer if (decrypted) |d| allocator.free(d);

    try std.testing.expect(decrypted != null);
    try std.testing.expectEqualSlices(u8, vector.plaintext, decrypted.?);
}

test "Ed25519 RFC 8032 test vectors" {
    const vector1 = ed25519_vectors.test_vector_1;

    // Reconstruct Ed25519 key from private key seed (first 32 bytes)
    const keypair = zcrypto.asym.ed25519.generateFromSeed(vector1.private_key);

    // Verify public key matches
    try std.testing.expectEqualSlices(u8, &vector1.public_key, &keypair.public_key);

    // Test signing and verification
    const signature = try zcrypto.asym.ed25519.sign(vector1.message, keypair.private_key);
    try std.testing.expect(zcrypto.asym.ed25519.verify(vector1.message, signature, keypair.public_key));

    // Test vector 2
    const vector2 = ed25519_vectors.test_vector_2;
    const keypair2 = zcrypto.asym.ed25519.generateFromSeed(vector2.private_key);
    try std.testing.expectEqualSlices(u8, &vector2.public_key, &keypair2.public_key);

    const signature2 = try zcrypto.asym.ed25519.sign(&vector2.message, keypair2.private_key);
    try std.testing.expect(zcrypto.asym.ed25519.verify(&vector2.message, signature2, keypair2.public_key));
}

test "SHA-256 NIST test vectors" {
    // Test empty string
    const empty_result = zcrypto.hash.sha256(sha256_vectors.empty.input);
    try std.testing.expectEqualSlices(u8, &sha256_vectors.empty.expected, &empty_result);

    // Test "abc"
    const abc_result = zcrypto.hash.sha256(sha256_vectors.abc.input);
    try std.testing.expectEqualSlices(u8, &sha256_vectors.abc.expected, &abc_result);

    // Test longer message
    const long_result = zcrypto.hash.sha256(sha256_vectors.long_message.input);
    try std.testing.expectEqualSlices(u8, &sha256_vectors.long_message.expected, &long_result);
}

test "BLAKE3 test vectors" {
    // Test empty string
    const empty_result = zcrypto.hash.blake3(blake3_vectors.empty.input);
    try std.testing.expectEqualSlices(u8, &blake3_vectors.empty.expected, &empty_result);

    // Test "hello world"
    const hello_result = zcrypto.hash.blake3(blake3_vectors.hello.input);
    try std.testing.expectEqualSlices(u8, &blake3_vectors.hello.expected, &hello_result);
}

test "ChaCha20-Poly1305 RFC 8439 vectors" {
    const allocator = std.testing.allocator;
    const vector = chacha20_poly1305_vectors.rfc8439_vector;

    // Test encryption round-trip
    const result = try zcrypto.sym.encryptChaCha20Poly1305(
        allocator,
        vector.key,
        vector.nonce,
        vector.plaintext,
        &vector.aad,
    );
    defer result.deinit();

    // Test decryption
    const decrypted = try zcrypto.sym.decryptChaCha20Poly1305(
        allocator,
        vector.key,
        vector.nonce,
        result.data,
        result.tag,
        &vector.aad,
    );
    defer if (decrypted) |d| allocator.free(d);

    try std.testing.expect(decrypted != null);
    try std.testing.expectEqualSlices(u8, vector.plaintext, decrypted.?);
}

test "PBKDF2 known test vectors" {
    const allocator = std.testing.allocator;

    // RFC 6070 test vector
    const password = "password";
    const salt = "salt";
    const iterations = 1;
    const expected_len = 20;

    const derived = try zcrypto.kdf.pbkdf2Sha256(allocator, password, salt, iterations, expected_len);
    defer allocator.free(derived);

    try std.testing.expectEqual(@as(usize, expected_len), derived.len);
    
    // Test deterministic output
    const derived2 = try zcrypto.kdf.pbkdf2Sha256(allocator, password, salt, iterations, expected_len);
    defer allocator.free(derived2);
    
    try std.testing.expectEqualSlices(u8, derived, derived2);
}

test "secp256k1 basic functionality" {
    const message = [_]u8{0x12, 0x34, 0x56, 0x78} ** 8; // 32-byte hash
    
    const keypair = zcrypto.asym.secp256k1.generate();
    const signature = try zcrypto.asym.secp256k1.sign(message, keypair.private_key);
    
    try std.testing.expect(zcrypto.asym.secp256k1.verify(message, signature, keypair.public_key_compressed));
    
    // Test with wrong message should fail
    var wrong_message = message;
    wrong_message[0] = ~wrong_message[0];
    try std.testing.expect(!zcrypto.asym.secp256k1.verify(wrong_message, signature, keypair.public_key_compressed));
}